// <auto-generated />
using System;
using ASPE.DQM.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASPE.DQM.Migrations.Model
{
    [DbContext(typeof(ModelDataContext))]
    [Migration("20191204155535_Remove_EvaluatedVariable_From_MeasurementMeta")]
    partial class Remove_EvaluatedVariable_From_MeasurementMeta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASPE.DQM.Model.DataQualityFrameworkCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DataQualityFrameworkCategories");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Document", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuildVersion")
                        .HasColumnType("int");

                    b.Property<int>("ChunkCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContentCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContentModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentDocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RevisionSetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RevisionVersion")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UploadedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Viewable")
                        .HasColumnName("isViewable")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FileName");

                    b.HasIndex("Name");

                    b.HasIndex("ParentDocumentID");

                    b.HasIndex("UploadedByID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Domain", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Measurement", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("Measure")
                        .HasColumnType("real");

                    b.Property<Guid>("MetadataID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("MetadataID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("ASPE.DQM.Model.MeasurementMeta", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonDataModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonDataModelVersion")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("DataSourceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DatabaseSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRangeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRangeStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MetricID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultsDelimiter")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<Guid>("ResultsTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubmittedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupportingResources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SuspendedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SuspendedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("MetricID");

                    b.HasIndex("SubmittedByID");

                    b.HasIndex("SuspendedByID");

                    b.ToTable("MeasurementMeta");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResultsTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDeskUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("ResultsTypeID");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("ASPE.DQM.Model.MetricResultsType", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MetricResultTypes");
                });

            modelBuilder.Entity("ASPE.DQM.Model.MetricStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<bool>("AllowEdit")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MetricStatuses");
                });

            modelBuilder.Entity("ASPE.DQM.Model.MetricStatusItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MetricID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MetricStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PreviousMetricStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("MetricID");

                    b.HasIndex("MetricStatusID");

                    b.HasIndex("PreviousMetricStatusID");

                    b.HasIndex("UserID");

                    b.ToTable("MetricStatusItems");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric_DataQualityFrameworkCategory", b =>
                {
                    b.Property<Guid>("MetricID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataQualityFrameworkCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MetricID", "DataQualityFrameworkCategoryID");

                    b.HasIndex("DataQualityFrameworkCategoryID");

                    b.ToTable("Metric_DataQualityFrameworkCategories");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric_Domain", b =>
                {
                    b.Property<Guid>("MetricID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DomainID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MetricID", "DomainID");

                    b.HasIndex("DomainID");

                    b.ToTable("Metric_Domains");
                });

            modelBuilder.Entity("ASPE.DQM.Model.User", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ASPE.DQM.Model.UserMetricFavorite", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MetricID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "MetricID");

                    b.HasIndex("MetricID");

                    b.ToTable("User_MetricFavorites");
                });

            modelBuilder.Entity("ASPE.DQM.Model.UserVisualizationFavorite", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisualizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "VisualizationID");

                    b.HasIndex("VisualizationID");

                    b.ToTable("User_VisualizationFavorites");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Visualization", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresAuth")
                        .HasColumnType("bit");

                    b.Property<string>("SheetID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Visualizations");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Document", b =>
                {
                    b.HasOne("ASPE.DQM.Model.Document", "ParentDocument")
                        .WithMany("Documents")
                        .HasForeignKey("ParentDocumentID");

                    b.HasOne("ASPE.DQM.Model.User", "UploadedBy")
                        .WithMany("Documents")
                        .HasForeignKey("UploadedByID");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Measurement", b =>
                {
                    b.HasOne("ASPE.DQM.Model.MeasurementMeta", "Metadata")
                        .WithMany("Measurements")
                        .HasForeignKey("MetadataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.MeasurementMeta", b =>
                {
                    b.HasOne("ASPE.DQM.Model.Metric", "Metric")
                        .WithMany("Measurements")
                        .HasForeignKey("MetricID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.User", "SubmittedBy")
                        .WithMany("Measurements")
                        .HasForeignKey("SubmittedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.User", "SuspendedBy")
                        .WithMany()
                        .HasForeignKey("SuspendedByID");
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric", b =>
                {
                    b.HasOne("ASPE.DQM.Model.User", "Author")
                        .WithMany("AuthoredMetrics")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.MetricResultsType", "ResultsType")
                        .WithMany("Metrics")
                        .HasForeignKey("ResultsTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.MetricStatusItem", b =>
                {
                    b.HasOne("ASPE.DQM.Model.Metric", "Metric")
                        .WithMany("Statuses")
                        .HasForeignKey("MetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.MetricStatus", "MetricStatus")
                        .WithMany()
                        .HasForeignKey("MetricStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.MetricStatusItem", "PreviousMetricStatus")
                        .WithMany()
                        .HasForeignKey("PreviousMetricStatusID");

                    b.HasOne("ASPE.DQM.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric_DataQualityFrameworkCategory", b =>
                {
                    b.HasOne("ASPE.DQM.Model.DataQualityFrameworkCategory", "DataQualityFrameworkCategory")
                        .WithMany("Metrics")
                        .HasForeignKey("DataQualityFrameworkCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.Metric", "Metric")
                        .WithMany("FrameworkCategories")
                        .HasForeignKey("MetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.Metric_Domain", b =>
                {
                    b.HasOne("ASPE.DQM.Model.Domain", "Domain")
                        .WithMany("Metrics")
                        .HasForeignKey("DomainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.Metric", "Metric")
                        .WithMany("Domains")
                        .HasForeignKey("MetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.UserMetricFavorite", b =>
                {
                    b.HasOne("ASPE.DQM.Model.Metric", "Metric")
                        .WithMany()
                        .HasForeignKey("MetricID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.User", "User")
                        .WithMany("FavoriteMetrics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPE.DQM.Model.UserVisualizationFavorite", b =>
                {
                    b.HasOne("ASPE.DQM.Model.User", "User")
                        .WithMany("FavoriteVisualizations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPE.DQM.Model.Visualization", "Visualization")
                        .WithMany()
                        .HasForeignKey("VisualizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
